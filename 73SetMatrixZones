/**
 * @param {number[][]} matrix
 * @return {void} Do not return anything, modify matrix in-place instead.
 */



var setZeroes = function(matrix) {
    let rows = matrix.length;
    let cols = matrix[0].length;
    let firstRowHasZero = false;
    let firstColHasZero = false;

    // Check if the first row has any zeroes
    for (let j = 0; j < cols; j++) {
        if (matrix[0][j] === 0) {
            firstRowHasZero = true;
            break;
        }
    }

    // Check if the first column has any zeroes
    for (let i = 0; i < rows; i++) {
        if (matrix[i][0] === 0) {
            firstColHasZero = true;
            break;
        }
    }

    // Use first row and first column as markers
    for (let i = 1; i < rows; i++) {
        for (let j = 1; j < cols; j++) {
            if (matrix[i][j] === 0) {
                matrix[i][0] = 0;
                matrix[0][j] = 0;
            }
        }
    }

    // Set rows based on markers
    for (let i = 1; i < rows; i++) {
        if (matrix[i][0] === 0) {
            for (let j = 1; j < cols; j++) {
                matrix[i][j] = 0;
            }
        }
    }

    // Set columns based on markers
    for (let j = 1; j < cols; j++) {
        if (matrix[0][j] === 0) {
            for (let i = 1; i < rows; i++) {
                matrix[i][j] = 0;
            }
        }
    }

    // Finally, zero out the first row if needed
    if (firstRowHasZero) {
        for (let j = 0; j < cols; j++) {
            matrix[0][j] = 0;
        }
    }

    // Finally, zero out the first column if needed
    if (firstColHasZero) {
        for (let i = 0; i < rows; i++) {
            matrix[i][0] = 0;
        }
    }
};











//  ____________________________________________________
// var setZeroes = function(matrix) {
//     let rows = matrix.length;
//     let cols = matrix[0].length;
//     let map = new Map();
//     // let locations = [] ;

//     for (let i = 0; i < rows; i++) {
//         for (let j = 0; j < cols; j++) {
//             if (matrix[i][j] === 0) {
//                 map.set(`${i},${j}`, true);
//                 // locations.push()
//             }
//         }
//     }
//     for (let key of map.keys()) {
//         let pos = key.indexOf(',');
//         let row = key.substring(0, pos); 
//         let col = key.substring(pos + 1); 
//         console.log(key)
//         fillZeros(row,col,matrix)
//     }
    
// };

// var fillZeros = function(row, col, matrix) {
//     for (let i = 0; i < matrix[0].length; i++) {
//         matrix[row][i] = 0;
//     }
    
//     // Set the entire column to zero
//     for (let j = 0; j < matrix.length; j++) {
//         matrix[j][col] = 0;
//     }
// };

/* let matrix = [
    [1, 0, 3],
    [4, 5, 6],
    [0, 8, 0]
________________
    [1, 0, 3],
    [4, 5, 6],
    [0, 8, 0]
*/


/*
    [0, 1, 2, 0, 1],
    [3, 4, 5, 2, 2],
    [1, 3, 1, 5, 6]
    [1, 3, 1, 5, 3]
*/ 

